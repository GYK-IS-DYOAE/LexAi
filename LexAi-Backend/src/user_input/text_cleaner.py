import re
import html
import unicodedata
from typing import Dict, Any

class TextCleaner:
    """
    KullanÄ±cÄ± girdilerini LLM modeline gÃ¶ndermeden Ã¶nce temizler.
    Basit, hÄ±zlÄ± ve kullanÄ±cÄ± dostu.
    """
    
    # Regex pattern'leri (Ã¶nceden derlenmiÅŸ - performans iÃ§in)
    EMOJI = re.compile(
        "[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF"
        "\U0001F1E0-\U0001F1FF\U00002700-\U000027BF\U0001F900-\U0001F9FF"
        "\U00002600-\U000026FF\U00002B00-\U00002BFF]+", 
        flags=re.UNICODE
    )
    
    URL = re.compile(r'http[s]?://\S+|www\.\S+', re.IGNORECASE)
    EMAIL = re.compile(r'\b[\w.+-]+@[\w-]+\.[\w.-]+\b')
    PHONE = re.compile(r'(\+?90\s?)?(\d{3}[\s.-]?)?\d{3}[\s.-]?\d{2}[\s.-]?\d{2}')
    
    # KÃ¼Ã§Ã¼k harfe Ã§evrildikten sonra aranacak zararlÄ± pattern'ler
    MALICIOUS = re.compile(r'<script|javascript:|onerror=|onclick=|<iframe')
    
    EXTRA_SPACE = re.compile(r'\s+')
    
    # HTML tag'lerini tamamen temizlemek iÃ§in
    HTML_TAGS = re.compile(r'<[^>]+>')
    
    def __init__(self, max_length: int = 5000):
        """
        Args:
            max_length: Maksimum metin uzunluÄŸu (DoS korumasÄ±)
        """
        self.max_length = max_length
    
    def clean(self, text: str) -> str:
        """
        Metni temizler ve normalize eder.
        
        Ä°ÅŸlem sÄ±rasÄ± (optimize edilmiÅŸ):
        1. BoÅŸ kontrol ve tip kontrolÃ¼
        2. Uzunluk limiti kontrolÃ¼
        3. HTML decode (encoding bypass'larÄ±nÄ± engeller)
        4. KÃ¼Ã§Ã¼k harfe Ã§evirme (ERKEN - case-based bypass'larÄ± engeller)
        5. GÃ¼venlik kontrolÃ¼ (XSS, injection)
        6. Unicode normalizasyon (TÃ¼rkÃ§e karakterler iÃ§in)
        7. URL, email, telefon temizleme
        8. Emoji temizleme
        9. Ã–zel karakter temizleme
        10. Fazla boÅŸluk temizleme
        
        Args:
            text: Temizlenecek metin
            
        Returns:
            str: TemizlenmiÅŸ metin
        """
        # 1. BoÅŸ veya geÃ§ersiz input kontrolÃ¼
        if not text or not isinstance(text, str):
            return ""
        
        # 2. Uzunluk limiti (DoS korumasÄ±)
        if len(text) > self.max_length:
            text = text[:self.max_length]
        
        # 3. HTML entity decode (encoding bypass'larÄ± engeller)
        # Ã–rnek: &lt;script&gt; -> <script>
        text = html.unescape(text)
        
        # 4. KÃ¼Ã§Ã¼k harfe Ã§evirme (GÃœVENLÄ°K Ä°Ã‡Ä°N ERKEN)
        # <ScRiPt>, <SCRIPT> gibi case-based bypass'larÄ± engeller
        text = text.lower()
        
        # 5. GÃ¼venlik kontrolÃ¼ - zararlÄ± pattern varsa boÅŸ dÃ¶ner
        # ArtÄ±k sadece kÃ¼Ã§Ã¼k harf pattern'leri arÄ±yoruz
        if self.MALICIOUS.search(text):
            return ""
        
        # 6. Unicode normalizasyon (TÃ¼rkÃ§e karakterler iÃ§in Ã¶nemli)
        # NFC: Canonical composition - TÃ¼rkÃ§e iÃ§in en uygun
        text = unicodedata.normalize('NFC', text)
        
        # 7. URL temizleme (phishing/spam korumasÄ±)
        text = self.URL.sub(' ', text)
        
        # 8. Email temizleme (PII korumasÄ±)
        text = self.EMAIL.sub(' ', text)
        
        # 9. Telefon temizleme (PII korumasÄ±)
        text = self.PHONE.sub(' ', text)
        
        # 10. Emoji temizleme (model compatibility)
        text = self.EMOJI.sub(' ', text)
        
        # 11. HTML tag'lerini tamamen temizle
        text = self.HTML_TAGS.sub(' ', text)
        
        # 12. Sadece TÃ¼rkÃ§e karakterler, rakamlar ve temel noktalama bÄ±rak
        text = ''.join(c for c in text if c.isalnum() or c.isspace() or c in '.,;:!?()-')
        
        text = self.EXTRA_SPACE.sub(' ', text).strip()
        
        return text
    
    def clean_with_details(self, text: str) -> Dict[str, Any]:
        """
        Metni temizler ve detaylÄ± bilgi dÃ¶ner.
        
        Returns:
            Dict: {
                'cleaned': temizlenmiÅŸ metin,
                'original_length': orijinal uzunluk,
                'cleaned_length': temizlenmiÅŸ uzunluk,
                'is_safe': gÃ¼venli mi
            }
        """
        if not text or not isinstance(text, str):
            return {
                'cleaned': '',
                'original_length': 0,
                'cleaned_length': 0,
                'is_safe': True
            }
        
        original_length = len(text)
        
        text_lower = html.unescape(text).lower()
        is_safe = not bool(self.MALICIOUS.search(text_lower))
        
        cleaned = self.clean(text)
        
        return {
            'cleaned': cleaned,
            'original_length': original_length,
            'cleaned_length': len(cleaned),
            'is_safe': is_safe
        }


_cleaner = TextCleaner()


def clean_text(text: str) -> str:
    """
    Basit kullanÄ±m iÃ§in fonksiyon.
    
    Example:
        clean_text("Merhaba! ðŸŽ‰ https://test.com")
        # Output: "merhaba"
    """
    return _cleaner.clean(text)


def clean_text_detailed(text: str) -> Dict[str, Any]:
    """
    DetaylÄ± sonuÃ§ dÃ¶nen fonksiyon.
    
    Example:
        result = clean_text_detailed("Test ðŸŽ‰")
        print(result['cleaned'])
        print(result['is_safe'])
    """
    return _cleaner.clean_with_details(text)


# Test
if __name__ == "__main__":
    test_texts = [
        "Merhaba! ðŸŽ‰ Bu bir test https://example.com",
        "Ä°letiÅŸim: test@email.com veya 0532 123 45 67",
        "Ã‡ok    fazla     boÅŸluk!!!",
        "ÅžÄ°ÅžLÄ°'de Ã§alÄ±ÅŸÄ±yorum",
        "<ScRiPt>alert('xss')</ScRiPt>",  
        "<SCRIPT>alert('xss')</SCRIPT>",   
    ]
    
    print("Temizleme Testleri:")
    print("=" * 70)
    for text in test_texts:
        result = clean_text_detailed(text)
        print(f"Orijinal:  {text}")
        print(f"Temiz:     {result['cleaned']}")
        print(f"GÃ¼venli:   {result['is_safe']}")
        print(f"Uzunluk:   {result['original_length']} -> {result['cleaned_length']}")
        print("-" * 70)